name: ci

on: push

env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "2.1.1"
  PYLINT_FIL_UNDER_LIMIT: "8"

jobs:
  linters-and-code-style:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    name: Run Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit environments
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        run: pre-commit run --all-files
  pylint-check:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    name: Pylint check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - name: Install poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install dependencies
        working-directory: ./src
        run: poetry install --with test
      - name: Pylint check
        working-directory: ./src
        run: poetry run pylint --fail-under=${{ env.PYLINT_FIL_UNDER_LIMIT }} ./
  tests:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    services:
      postgres:
        image: clickhouse/clickhouse-server:25.3
        env:
          CLICKHOUSE_DB: events
          POSTGRES_PASSWORD: secret
          CLICKHOUSE_USER: clickhouse
          CLICKHOUSE_EXTERNAL_PORT: 8123
        ports:
          - 8123:8123
          - 9000:9000
          - 9009:9009
    name: Tests
    needs:
      - pylint-check
      - linters-and-code-style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - name: Install poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install dependencies
        working-directory: ./src
        run: poetry install --with test
      - name: Update env values
        run: |
          echo "API_KEY=test-key" >> .env-dist
          echo "CLICKHOUSE_DB=events" >> .env-dist
          echo "PORT=8787" >> .env-dist
          echo "CLICKHOUSE_USER=clickhouse" >> .env-dist
          echo "CLICKHOUSE_PASSWORD=secret" >> .env-dist
          echo "CLICKHOUSE_EXTERNAL_PORT=8123" >> .env-dist
          echo "CLICKHOUSE_PORT_1=9000" >> .env-dist
          echo "CLICKHOUSE_PORT_2=9009" >> .env-dist
          echo "MIXPANEL_PROJECT_TOKEN=test-key" >> .env-dist
      - name: Setup default env values
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.env-dist'
      - name: Test core
        working-directory: ./src
        run: poetry run python -m unittest discover test

  production-deploy:
    if: "github.ref == 'refs/heads/production' || contains(github.event.head_commit.message, 'production-testing-deployment')"
    needs: tests
    name: Production deploy
    runs-on: ubuntu-latest
    steps:
      - name: Running ssh deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          port: ${{ secrets.PROD_PORT }}
          script: cd events-manager && git fetch && git pull && make complete-build && cd && echo "cicd-events-manager,$(date '+%Y-%m-%d %H:%M:%S')" >> deployments.csv
